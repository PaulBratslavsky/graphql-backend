type Query {
  user(userId: Int!): User!
  users(name: [String], age: [Int]): [User!]
  post(postId: Int!): Post!
  posts: [Post!]!
  picture(pictureId: Int!): Picture!
  pictures: [Picture!]!
}

type Mutation {
  addUser(data: AddUserInput!): User!
  addPost(title: String!, content: String!, status: PostState!): Post! 
  deletePost(id: ID!): Boolean
  deleteUser(id: ID!): Boolean
  updateUser(id: ID!, data: UpdateUserInput!): User!
}

input AddUserInput {
  name: String!
  age: Int!
  married: Boolean 
  status: UserState!
}

input UpdateUserInput {
  name: String
  age: Int
  married: Boolean 
    status: UserState
}

enum UserState {
  active
  not_active
  trainee
  guest
}


enum PostState {
  PUBLISHED
  PUBLIC
  DRAFT
}


type User {
  id: ID!
  name: String!
  age: Int
  married: Boolean
  average: Float
  status: UserState!
  posts: [Post!]!
  pictures: [Picture!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  picture: Picture
  status: PostState!
}

type Picture {
  id: ID!
  path: String!
  author: User!
  post: Post!
}
